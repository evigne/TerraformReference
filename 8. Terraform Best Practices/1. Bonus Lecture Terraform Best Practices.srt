1
00:00:02,090 --> 00:00:07,040
Now, many of the best practices are Iran, TerraForm State and state file.

2
00:00:07,400 --> 00:00:09,480
So let's quickly understand what they are.

3
00:00:09,500 --> 00:00:17,690
First, TerraForm is a tool that automates creating infrastructure and then making changes and maintaining

4
00:00:17,690 --> 00:00:24,560
that infrastructure and to keep track of the current infrastructure state and what changes you want

5
00:00:24,560 --> 00:00:25,130
to make.

6
00:00:25,640 --> 00:00:31,490
TerraForm uses state where you change configuration in TerraForm script.

7
00:00:31,940 --> 00:00:39,980
It will compare your desired configuration with the current infrastructure state and figure out a plan

8
00:00:39,980 --> 00:00:43,730
to make those desired changes in state.

9
00:00:43,730 --> 00:00:51,440
In TerraForm is a simple Jason file, which looks like this and has a list of all the infrastructure

10
00:00:51,440 --> 00:00:55,010
resources that TerraForm manages for you.

11
00:00:58,130 --> 00:01:00,530
Because it's a simple Jason file.

12
00:01:00,950 --> 00:01:08,000
Technically, you could make adjustments to the state file directly by manually changing stuff inside.

13
00:01:08,570 --> 00:01:16,670
However, the first best practice is only change the state file contents through TerraForm Command execution

14
00:01:17,240 --> 00:01:19,400
do not manually manipulate it.

15
00:01:19,640 --> 00:01:22,430
Otherwise, you may get some unexpected results.

16
00:01:25,600 --> 00:01:28,720
Now, where does this state file actually come from?

17
00:01:29,410 --> 00:01:35,440
When you first execute terror form, apply command in TerraForm will automatically create the state

18
00:01:35,440 --> 00:01:36,730
file locally.

19
00:01:37,240 --> 00:01:39,130
But what if you're working in a tin?

20
00:01:39,730 --> 00:01:45,210
So other team members also need to execute terror form commands, and they will also need the state

21
00:01:45,230 --> 00:01:45,850
file for that.

22
00:01:46,510 --> 00:01:52,720
In fact, every team member will need the latest state file before making their own updates.

23
00:01:53,290 --> 00:01:59,260
So the second best practice is to configure a shared remote storage for the state file.

24
00:01:59,440 --> 00:02:05,170
Every team member can now execute terror form commands using this shared state file.

25
00:02:05,440 --> 00:02:13,360
In practice, remote storage beckoned for state file can be Amazon as three bucket tier form cloud is

26
00:02:13,360 --> 00:02:20,410
your Google Cloud, etc. and you can configure TerraForm to use that remote storage as a state file

27
00:02:20,410 --> 00:02:21,010
location.

28
00:02:24,040 --> 00:02:28,840
But what if two team members execute TerraForm comments at the same time?

29
00:02:29,200 --> 00:02:32,920
What happens to the state file when you have concurrent changes?

30
00:02:33,430 --> 00:02:40,360
You might get a conflict or mess up your state file to avoid changing TerraForm State at the same time.

31
00:02:40,720 --> 00:02:47,860
We have the next best practice, which is locking the state file until an update is fully completed

32
00:02:48,220 --> 00:02:50,110
and then unlock it for the next command.

33
00:02:50,680 --> 00:02:53,920
This way, you can prevent concurrent edits to your state file.

34
00:02:54,400 --> 00:02:57,730
In practice, you will have this configured in your storage.

35
00:02:57,730 --> 00:02:59,620
Bequant in as three bucket.

36
00:02:59,620 --> 00:03:05,530
For example, Dynamo DBE service is automatically used for state file locking.

37
00:03:06,190 --> 00:03:09,220
But note that not all storage beckons.

38
00:03:09,220 --> 00:03:10,060
Support this.

39
00:03:10,660 --> 00:03:15,340
So be aware of that when choosing a remote storage for the state file.

40
00:03:15,760 --> 00:03:19,570
If supported, TerraForm will lock your state file automatically.

41
00:03:22,510 --> 00:03:28,480
Now what happens if you lose your state file, something may happen to your remote storage location

42
00:03:28,510 --> 00:03:31,690
or someone may accidentally overwrite the data.

43
00:03:32,170 --> 00:03:38,890
Or it may get corrupted to avoid this, the next best practice is to backup your state file.

44
00:03:39,520 --> 00:03:43,570
In practice, you can do this by enabling versioning for it.

45
00:03:43,870 --> 00:03:49,660
In many, storage beacons will have such a feature like in S3 Bucket, for example, you can simply

46
00:03:49,660 --> 00:03:51,460
turn on the versioning feature.

47
00:03:51,910 --> 00:03:58,330
This also means that you have a nice history of state changes, and you can reverse to any previous

48
00:03:58,330 --> 00:03:59,950
TerraForm State if you want to.

49
00:04:03,150 --> 00:04:09,570
Great, so now you have your state filed in a shared remote location with locking enabled and file versioning

50
00:04:09,570 --> 00:04:10,230
for backup.

51
00:04:10,530 --> 00:04:17,850
So you have one state file for your infrastructure, but usually you have multiple environments like

52
00:04:17,850 --> 00:04:19,980
development, testing and production.

53
00:04:20,490 --> 00:04:23,820
So which environment does this state file belong to?

54
00:04:24,270 --> 00:04:27,450
Can you manage all the environments with one state file?

55
00:04:27,840 --> 00:04:35,280
And this is the next best practice to use one dedicated state file per environment, and each state

56
00:04:35,280 --> 00:04:40,050
file will have its own storage backend with locking and versioning configured.

57
00:04:40,590 --> 00:04:43,950
This were best practices related to TerraForm State.

58
00:04:44,760 --> 00:04:52,440
The next three best practices are about how to manage the TerraForm code itself and how to apply infrastructure

59
00:04:52,440 --> 00:04:53,100
changes.

60
00:04:53,850 --> 00:05:00,990
These practices can be grouped into a relatively new trend that emerged in the infrastructure as code

61
00:05:00,990 --> 00:05:03,210
space, which is called get ups.

62
00:05:03,960 --> 00:05:06,120
So let's see the next best practices.

63
00:05:09,220 --> 00:05:15,520
When you're working on TerraForm scripts in a team, it's important to share the code in order to collaborate

64
00:05:15,520 --> 00:05:16,240
effectively.

65
00:05:16,780 --> 00:05:24,100
So as the next best practice, you should actually host TerraForm code in its own kit repository, just

66
00:05:24,100 --> 00:05:25,540
like your application code.

67
00:05:26,110 --> 00:05:32,470
This is not only beneficial for effective collaboration in a team, but you also get versioning for

68
00:05:32,470 --> 00:05:37,960
your infrastructure code changes so you can have a history of changes in your TerraForm code.

69
00:05:41,160 --> 00:05:45,330
Now, who is allowed to make changes to TerraForm code?

70
00:05:45,660 --> 00:05:49,470
Can anyone just directly commit the changes to the repository?

71
00:05:49,890 --> 00:05:55,710
The best practice is actually to treat your TerraForm code just like your application code.

72
00:05:56,130 --> 00:06:02,850
This means you should have the same process of reviewing and testing the changes in your infrastructure

73
00:06:02,850 --> 00:06:08,640
code as you have for your application code with a continuous integration pipeline.

74
00:06:09,090 --> 00:06:12,720
Using Merge requests to integrate code changes.

75
00:06:13,350 --> 00:06:19,770
This will allow your team to collaborate and produce quality infrastructure code, which is tested and

76
00:06:19,770 --> 00:06:20,190
reviewed.

77
00:06:23,430 --> 00:06:27,540
Great, so you have tested and reviewed code changes in your repository.

78
00:06:28,110 --> 00:06:31,680
Now how do you apply them to the actual infrastructure?

79
00:06:32,220 --> 00:06:36,090
Because eventually you want to update your infrastructure with those changes, right?

80
00:06:36,660 --> 00:06:44,250
The final best practice is to execute TerraForm commence to apply changes in a continuous deployment

81
00:06:44,280 --> 00:06:44,970
pipeline.

82
00:06:45,510 --> 00:06:51,960
So instead of team members manually updating the infrastructure by executing terraform commands from

83
00:06:51,960 --> 00:06:57,450
their own computers, it should happen only from an automated built.

84
00:06:57,990 --> 00:07:04,440
This way, you have a single location from which all the infrastructure changes happen and you have

85
00:07:04,440 --> 00:07:08,580
a more streamlined process of updating your infrastructure.

86
00:07:09,060 --> 00:07:15,450
These are the eight TerraForm best practices you can apply to make your TerraForm projects more robust

87
00:07:15,450 --> 00:07:18,090
and easier to work on as a team.
