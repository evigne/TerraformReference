1
00:00:06,970 --> 00:00:11,290
So I'm going to create now a folder here called Modules

2
00:00:15,190 --> 00:00:24,970
and Inside Modules, we are going to create folders for the actual modules so we can have, for example,

3
00:00:25,000 --> 00:00:27,460
the Web server configuration.

4
00:00:28,720 --> 00:00:30,970
Let's call it Web server module.

5
00:00:31,210 --> 00:00:33,310
And then we can have a.

6
00:00:35,290 --> 00:00:43,480
In the module's here, we can have another module and let's actually call it subnet.

7
00:00:48,600 --> 00:01:00,810
So now we have prepared folders for two modules and each module will have its own main ATF output,

8
00:01:00,820 --> 00:01:08,610
stative and variable stot T.F. files, so we can go ahead and create those three files in here.

9
00:01:08,910 --> 00:01:14,130
And actually, I'm going to do it from a terminal because it's easier.

10
00:01:14,370 --> 00:01:20,760
And if you're working also in a visual studio code like I am, you can actually have the terminal.

11
00:01:23,020 --> 00:01:32,020
Window inside, instead of switching back to the operating system terminal, which opens up right away

12
00:01:32,020 --> 00:01:37,030
in the correct folder of the project, and I'm going to create those files from here because it's just

13
00:01:37,030 --> 00:01:37,490
easier.

14
00:01:37,780 --> 00:01:41,860
So let's go to module's and.

15
00:01:43,760 --> 00:01:56,420
To observer and inside here, I'm going to create my own doctor and I'm going to create Output's thought

16
00:01:56,450 --> 00:02:09,860
T.F. And I'm going to create variables that T.F. And no, I'm going to switch to subnet and.

17
00:02:12,350 --> 00:02:22,090
To the same basically main A.F. odd fruits and vegetables, and now if we expand those, there we go,

18
00:02:22,430 --> 00:02:25,030
we have our module's structure, right.

19
00:02:25,220 --> 00:02:26,350
These are now empty.

20
00:02:26,540 --> 00:02:28,010
We don't have anything inside.

21
00:02:28,010 --> 00:02:31,670
So we can start creating content in those files.

22
00:02:32,000 --> 00:02:38,360
But this is actually the structure, which is also very straightforward and very logical in their form

23
00:02:38,540 --> 00:02:44,270
of grouping together your modules and basically structuring your whole project.

24
00:02:44,570 --> 00:02:52,070
So now when we create modules and configuration of these modules here, we can just reference them from

25
00:02:52,070 --> 00:02:53,150
the main otf.

26
00:02:53,300 --> 00:02:59,360
So we have an entry point configuration file, which is our root module, and then we have the children

27
00:02:59,360 --> 00:03:02,350
modules inside that we can reference from the root.

28
00:03:02,600 --> 00:03:06,740
So I'm going to close the terminal now and we have the structure now.

29
00:03:06,740 --> 00:03:15,550
Now let's actually start extracting the configuration from here to individual reusable modules.

30
00:03:15,740 --> 00:03:20,450
So first, let's actually move the subnets configuration to a module.

31
00:03:20,600 --> 00:03:23,930
And there is one point about modules.

32
00:03:23,930 --> 00:03:29,480
And when you're creating them, when you're creating a module, it actually should group a couple of

33
00:03:29,480 --> 00:03:30,860
resources together.

34
00:03:31,100 --> 00:03:36,870
So creating a module for one or two resources doesn't really make much sense.

35
00:03:36,920 --> 00:03:44,360
So with a module, you should actually be grouping something together and making an abstraction of it

36
00:03:44,360 --> 00:03:44,660
right.

37
00:03:44,840 --> 00:03:51,700
To make a group of resources reusable because you already have the resource for subnet, right?

38
00:03:51,710 --> 00:03:58,490
So creating a module just for one resource wouldn't make sense because you're not saving any code and

39
00:03:58,490 --> 00:04:00,300
you actually have more overhead.

40
00:04:00,590 --> 00:04:06,880
So just keep that in mind that when you're creating a module, you should actually group at least three

41
00:04:06,880 --> 00:04:09,980
or four resources for it to make sense.

42
00:04:09,990 --> 00:04:10,330
Right.

43
00:04:10,820 --> 00:04:18,380
So in our case, we're going to do is that in our subnet module, we're going to actually extract the

44
00:04:18,380 --> 00:04:21,530
whole configuration of the networking.

45
00:04:21,770 --> 00:04:25,250
We're actually going to grab those three resources.

46
00:04:25,280 --> 00:04:33,290
So basically the summit itself, the internal gateway and the default row table and its association

47
00:04:33,290 --> 00:04:34,400
with Gateway.

48
00:04:34,760 --> 00:04:40,130
And obviously, if we are creating a new round table, then we would have a subnet association with

49
00:04:40,130 --> 00:04:42,290
it and we would also grab that along.

50
00:04:42,560 --> 00:04:51,430
So in this case, I'm going to grab those three resources and I'm going to move them.

51
00:04:52,310 --> 00:04:55,940
We're going to leave the VPC here and I'm going to move them in.

52
00:04:55,940 --> 00:05:04,940
Subnet modules mean that T.F. and the way to actually use the module from another config file, in our

53
00:05:04,940 --> 00:05:13,460
case, we're going to be actually referencing and using that module in the main otf of the root module

54
00:05:13,940 --> 00:05:21,590
is actually to make it completely configurable because we have to pass in all the variables.

55
00:05:21,830 --> 00:05:30,290
So basically all the values that are set here should be passed in by the configuration that is referencing

56
00:05:30,290 --> 00:05:30,430
it.

57
00:05:30,800 --> 00:05:35,240
So all of these values are going to be replaced with variables.

58
00:05:35,480 --> 00:05:45,140
So the VPC is obviously we're going to call them VPC, DB and we're going to replace that in all the

59
00:05:45,560 --> 00:05:47,680
occurrences like this.

60
00:05:48,170 --> 00:05:54,080
The other parts here we have already parameterized, which is again a good practice, especially if

61
00:05:54,080 --> 00:05:56,750
you want to modularize your project.

62
00:05:57,020 --> 00:06:00,680
So we have already done that as well as here.

63
00:06:01,010 --> 00:06:05,150
And we can substitute the value here as well as well as here.

64
00:06:05,150 --> 00:06:11,480
We're referencing FBC, which is actually outside in the root module.

65
00:06:11,900 --> 00:06:19,090
So I'm going to replace it with a variable and we're going to call it for those roads.

66
00:06:19,390 --> 00:06:27,860
Well, that's code default rates, table ID, right.

67
00:06:27,870 --> 00:06:30,020
We can leave the city block as is.

68
00:06:30,320 --> 00:06:36,440
And this reference here actually anyway is Internet Gateway is.

69
00:06:37,440 --> 00:06:43,830
Of a resource that exists in the same module, so we don't have to replace that through a variable because

70
00:06:43,830 --> 00:06:51,990
we have that resource available in the same context so we can leave this as is we have to replace these

71
00:06:51,990 --> 00:06:56,690
ones because we don't have the VPC reference inside here.

72
00:06:57,240 --> 00:06:58,670
It's defined outside.

73
00:06:58,920 --> 00:07:06,400
So we have to pass that as a variable so we can leave all the IP addresses as well as we can leave the

74
00:07:06,450 --> 00:07:11,040
reference to a resource that exists in the same module.

75
00:07:12,280 --> 00:07:12,710
Great.

76
00:07:13,050 --> 00:07:20,280
So now we have to define all those variables inside that module in the variables dot t.f..

77
00:07:20,460 --> 00:07:25,370
So all this variable definitions must actually be in that file, right.

78
00:07:25,590 --> 00:07:31,230
Because having those values available in variables, the ATF doesn't actually work for us.

79
00:07:31,230 --> 00:07:31,480
Right.

80
00:07:31,500 --> 00:07:33,440
It has to be in the same module.

81
00:07:33,990 --> 00:07:37,320
So I'm actually going to copy some of these variables.

82
00:07:38,160 --> 00:07:39,570
Let's actually see what we need.

83
00:07:39,810 --> 00:07:42,690
We need the subnet cider block.

84
00:07:43,110 --> 00:07:44,010
So I'm going to.

85
00:07:45,330 --> 00:07:46,530
Copy that in here.

86
00:07:47,940 --> 00:07:51,140
We also need available to Zone and prefix.

87
00:07:52,200 --> 00:07:53,430
I'm going to grab both.

88
00:07:57,960 --> 00:08:04,080
And copy it here, I actually cut the Senate side are blocked because we only need it in the subnet

89
00:08:04,080 --> 00:08:10,010
module, but if anybody's on in and prefix, we actually need it for the Web server as well.

90
00:08:10,020 --> 00:08:12,080
So I'm going to leave it here as well.

91
00:08:12,690 --> 00:08:19,190
And we have two new variables, which are VPC, ID and default round table ID.

92
00:08:19,680 --> 00:08:22,460
So we're going to create those as well.

93
00:08:33,920 --> 00:08:35,180
And I'm going to close it,

94
00:08:38,090 --> 00:08:46,340
so now we have all the variables that we're referencing in the subnets configuration defined in the

95
00:08:46,340 --> 00:08:49,280
modules variables dot file.

96
00:08:54,200 --> 00:09:02,390
So now that we have the configuration as well as the variables defined, how do we actually use the

97
00:09:02,390 --> 00:09:07,760
module or how do we reference it from another configuration file?

98
00:09:07,970 --> 00:09:12,020
And the way we do that is actually using a module keyword.

99
00:09:13,400 --> 00:09:20,390
So we're going to write a module and then we're going to call this module something that we want.

100
00:09:20,870 --> 00:09:29,860
So let's actually call it my app dash subnet and we're going to create a blog.

101
00:09:30,170 --> 00:09:33,550
And now here we're going to need a couple of attributes.

102
00:09:33,860 --> 00:09:37,230
The first one is the source of the module.

103
00:09:37,370 --> 00:09:41,150
So where is this module actually living?

104
00:09:41,150 --> 00:09:41,500
Right.

105
00:09:41,870 --> 00:09:49,820
And the source in our case is just the location or path to the folder of our module.

106
00:09:50,210 --> 00:09:55,940
And that is modules slash subnet.

107
00:09:56,780 --> 00:10:00,710
So we are telling TerraForm, we're defining a module here.

108
00:10:00,710 --> 00:10:03,230
And this is the name that we just decided to give it.

109
00:10:03,500 --> 00:10:12,320
And the actual code or configuration of the module actually leaves inside a folder called Modules Subnet.

110
00:10:12,680 --> 00:10:18,130
So TerraForm will find the configuration files here and this will be basically our module.

111
00:10:18,710 --> 00:10:26,600
And once the source is defined now, we actually have to pass in all those variables that we defined

112
00:10:27,170 --> 00:10:28,250
in here, actually.

113
00:10:28,680 --> 00:10:28,900
Right.

114
00:10:29,210 --> 00:10:34,500
So the values to those variables need to be provided when we are referring to module.

115
00:10:34,760 --> 00:10:42,110
So if you're familiar with programming languages, think of it like defining a function with a bunch

116
00:10:42,110 --> 00:10:50,920
of parameters and then calling that function in here by passing in those parameters one by one is values.

117
00:10:51,290 --> 00:10:51,520
Right?

118
00:10:51,590 --> 00:10:53,590
This is exactly what we are doing here.

119
00:10:54,140 --> 00:10:58,190
So let's actually set those variables one by one.

120
00:10:58,610 --> 00:11:04,720
So previously we had all these variables or some of these variables already set in the way we provided

121
00:11:04,730 --> 00:11:11,450
values to those variables was actually through terraformed or T.F. versus file.

122
00:11:11,450 --> 00:11:11,770
Right.

123
00:11:13,160 --> 00:11:18,240
This is how we were actually passing the or setting those variable values.

124
00:11:18,560 --> 00:11:23,620
Now, since we made it into module, we have to define them in the module section.

125
00:11:24,140 --> 00:11:26,770
So let's actually set them one by one.

126
00:11:27,290 --> 00:11:33,260
So we have the subnet side block and now the subnet side or block value.

127
00:11:33,260 --> 00:11:42,770
We can actually provide it either by hard coding it like this or we can also reference it from the TFN

128
00:11:42,770 --> 00:11:44,270
file, just like we did before.

129
00:11:44,840 --> 00:11:47,270
So instead can do.

130
00:11:49,520 --> 00:11:53,720
However, this reference actually comes from the variables.

131
00:11:53,720 --> 00:12:00,090
The ATF in the main module and I have actually deleted that from here.

132
00:12:00,350 --> 00:12:07,430
However, if you want to reference it from Mendota in the root module, we actually need that variable

133
00:12:07,430 --> 00:12:12,790
definition also in the variables dot to file in that module.

134
00:12:13,070 --> 00:12:17,330
So I'm going to add it back so that we can reference it.

135
00:12:18,990 --> 00:12:27,540
So basically now what we're doing is we're referencing a variable called Subnet Seiter block that has

136
00:12:27,540 --> 00:12:35,160
to be defined in the same module where this means T.F. is so we have variables or T.F. for that.

137
00:12:35,430 --> 00:12:36,870
So it has to be declared here.

138
00:12:38,100 --> 00:12:47,280
And those variables then are set through the terraformed T.F. varas file where we are just providing

139
00:12:47,430 --> 00:12:49,800
the values for all those variables.

140
00:12:49,950 --> 00:12:51,110
So this is how it works.

141
00:12:51,390 --> 00:12:58,260
We have the values, the actual values defined here that are set as values of the variables defined

142
00:12:58,530 --> 00:12:59,730
in this file.

143
00:12:59,910 --> 00:13:02,820
And then we're passing on those values.

144
00:13:03,570 --> 00:13:13,650
In this case, the subnet site or block to the module subnet in here, which is also grabbing those

145
00:13:13,650 --> 00:13:20,070
values through variable references, which also have to be defined in the variables that have.

146
00:13:20,190 --> 00:13:24,180
So we kind of have the hierarchy of variables and the references.

147
00:13:24,480 --> 00:13:30,360
And this actually makes sense when you have complex set up and complex infrastructure.

148
00:13:30,960 --> 00:13:38,640
And to make it modular, even though it seems like an overhead for a small setup now and the same way

149
00:13:38,640 --> 00:13:44,910
we're going to actually reference all the other values that our module requires.

150
00:13:45,270 --> 00:13:52,290
So basically, all of these values here and as I mentioned previously, if we are going to provide them

151
00:13:52,290 --> 00:13:59,790
as variables ourself or we're going to reference them as values here, they need to be defined in these

152
00:13:59,790 --> 00:14:02,040
variables that T.F. also.

153
00:14:02,550 --> 00:14:05,220
So let's see the second variable.

154
00:14:08,210 --> 00:14:16,850
Which is a zone that's also referenced it like this, also from the tier from tier first, while we

155
00:14:16,850 --> 00:14:29,660
also have environment prefix, which is also stated here, and then we have the VPC Edem, which we

156
00:14:29,660 --> 00:14:38,090
can actually access from the resource because we have the VPC resource defined in this module so we

157
00:14:38,090 --> 00:14:41,600
can do this.

158
00:14:41,780 --> 00:14:48,680
So basically, as you see, even though we have extracted a module of our subnet, the syntax and the

159
00:14:48,680 --> 00:14:50,290
concepts actually stay the same.

160
00:14:50,300 --> 00:14:58,160
So we didn't have to change how we reference the existing resources or how we reference the variables,

161
00:14:58,160 --> 00:15:00,140
file values and so on.

162
00:15:00,620 --> 00:15:10,030
It's just that we have created another level of hierarchy within our project and finally we have default

163
00:15:10,040 --> 00:15:15,980
Rhodes Table Edem, which we can also reference.

164
00:15:20,170 --> 00:15:21,430
From the VPC.

165
00:15:23,490 --> 00:15:31,600
And the attributes, as we saw previously, is Deverall table idea of the VPC object.

166
00:15:31,890 --> 00:15:35,590
So this way we're actually setting all the values.

167
00:15:35,610 --> 00:15:38,760
So these are the attribute names that we define ourselves.

168
00:15:39,000 --> 00:15:40,700
This could be anything that we want.

169
00:15:41,130 --> 00:15:44,930
Let's actually close this off and right here.

170
00:15:44,940 --> 00:15:50,970
So basically, whatever we name the variables, they are going to be the attribute names of the module

171
00:15:50,970 --> 00:15:54,520
and the names that we're going to be setting here.

172
00:15:54,720 --> 00:15:57,450
And as I said, the values can be either hardcoded.

173
00:15:57,460 --> 00:16:06,360
So this could be a string with actual block or in our case, we're referencing the T.F. Vase values,

174
00:16:06,840 --> 00:16:13,560
or we can reference it from the resource object like we're doing for VPC, ID and default row table.

175
00:16:14,340 --> 00:16:17,760
And one thing that I forgot to do here is actually in the source.

176
00:16:18,570 --> 00:16:26,220
If we are referencing a module using a relative path, so basically relative to the main file, then

177
00:16:26,220 --> 00:16:28,550
we have to specify like this.

178
00:16:28,890 --> 00:16:31,110
So we have to say current directory.

179
00:16:31,140 --> 00:16:35,010
That's what DOT is for modules subnet.

180
00:16:35,250 --> 00:16:37,960
So without this we will actually get a warning.

181
00:16:38,250 --> 00:16:40,880
So let's fix it right here.

182
00:16:41,940 --> 00:16:48,360
So we have this module declared here, however, because we have extracted all these resources, including

183
00:16:48,360 --> 00:16:54,370
the subnet resource, to its own module, the references are actually broken now.

184
00:16:54,390 --> 00:16:58,500
So if I scroll to easy to instant's.

185
00:16:59,810 --> 00:17:04,470
Which is referencing the subnets right here.

186
00:17:04,880 --> 00:17:11,750
This will not work because we don't have a resource called Illawarra's subnet with this name defined

187
00:17:11,750 --> 00:17:13,340
in this module.

188
00:17:13,370 --> 00:17:13,730
Right.

189
00:17:14,060 --> 00:17:17,180
This resource is actually defined in another module.

190
00:17:17,330 --> 00:17:21,650
And we cannot access a child module resource like this.

191
00:17:21,650 --> 00:17:24,820
We can only access it through module definition.

192
00:17:25,190 --> 00:17:25,500
Right.

193
00:17:25,550 --> 00:17:32,320
So we actually need to fix those references first so that this code can work again.
