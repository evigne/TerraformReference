1
00:00:03,730 --> 00:00:12,160
Now, I mentioned several times that Terraformed keeps track of the current state and reads the desired

2
00:00:12,160 --> 00:00:14,300
state from the configuration file, right.

3
00:00:14,770 --> 00:00:22,480
So every time we do terraform a play or we have done terraform a play or destroy it in the output's,

4
00:00:22,840 --> 00:00:25,990
we have the refreshing state messages.

5
00:00:25,990 --> 00:00:26,260
Right.

6
00:00:26,470 --> 00:00:33,940
So for the resources that are available in the configuration file or we have defined here, TerraForm

7
00:00:33,940 --> 00:00:41,350
refreshes the state and then it calculates in the background whether anything needs to be done in order

8
00:00:41,350 --> 00:00:43,990
to get from the current state to the desired state.

9
00:00:44,230 --> 00:00:51,750
Now, how does TerraForm know what the current state of the resources defined here is?

10
00:00:52,210 --> 00:01:01,180
Now, if you look in that terraform folder that we have, our main thought file in, two additional

11
00:01:01,180 --> 00:01:10,110
files have been generated by TerraForm and these are called terraformed dot T.F. State and TFSA dot

12
00:01:10,150 --> 00:01:10,720
pickup.

13
00:01:11,080 --> 00:01:18,670
So this is a JSON file basically that gives us a list of resources in their current state.

14
00:01:19,450 --> 00:01:23,620
And TerraForm generates these files on the first appli.

15
00:01:23,710 --> 00:01:24,100
Right.

16
00:01:24,250 --> 00:01:29,950
The first time we execute TerraForm Inplay Command TerraForm actually goes to HWC because that's our

17
00:01:29,950 --> 00:01:30,550
provider.

18
00:01:30,970 --> 00:01:39,190
It connects to our account, it executes whatever we define in the configuration state, and then it

19
00:01:39,190 --> 00:01:44,200
stauss the current state in this terraform state file.

20
00:01:44,500 --> 00:01:50,590
And whenever we make changes and we apply these changes, this terraformed file gets updated.

21
00:01:50,620 --> 00:01:57,070
So basically this is like a state store for TerraForm to get that up to date information and this refreshing

22
00:01:57,070 --> 00:01:58,380
output that you see here.

23
00:01:58,450 --> 00:02:06,040
What this basically does is refreshing this file and setting new information here because we have destroyed

24
00:02:06,040 --> 00:02:07,260
all our resources.

25
00:02:07,510 --> 00:02:10,300
Right now, the resources is an empty array.

26
00:02:10,480 --> 00:02:18,550
So current state basically is we have none of the resources that are defined here in the AWB account.

27
00:02:18,880 --> 00:02:23,990
And the backup file is actually the previous state for the resources.

28
00:02:24,000 --> 00:02:31,510
So before we deleted all our resources, this was a state, the previous state, with all the information

29
00:02:31,510 --> 00:02:37,370
here and it is saved, is a backup to have a previous state as well.

30
00:02:37,600 --> 00:02:45,670
So now let's go back to our TFSA, which shows that the resources is empty and let's now actually reapply

31
00:02:45,700 --> 00:02:46,990
this whole configuration.

32
00:02:50,850 --> 00:02:58,490
So let's do terraform play, let's actually do or proof so that we don't have to confirm it.

33
00:03:00,850 --> 00:03:07,900
So Terraformed says that the current state is basically empty resources, so it compares it to the desired

34
00:03:07,900 --> 00:03:11,560
state and it creates all the resources that we have defined.

35
00:03:11,980 --> 00:03:12,410
Right.

36
00:03:12,430 --> 00:03:19,990
And these are basically the names of the resources with resource type and resource name that we gave

37
00:03:19,990 --> 00:03:20,160
it.

38
00:03:20,770 --> 00:03:23,080
And now if we go back to our.

39
00:03:24,520 --> 00:03:33,370
Terraformed state file, you see, the empty array of resources has been filled in with new information

40
00:03:33,820 --> 00:03:41,620
and each element inside this resources arena is basically one configuration, resource and component

41
00:03:41,620 --> 00:03:42,670
we have defined here.

42
00:03:42,980 --> 00:03:44,860
So first we have data.

43
00:03:44,890 --> 00:03:52,630
This whole thing here that stores the information that we get as a result of querying these existing

44
00:03:52,630 --> 00:03:53,220
VPC.

45
00:03:53,560 --> 00:04:01,450
So we have the default VPC information here in data, VPC, existing VPC objects.

46
00:04:01,510 --> 00:04:06,760
And since this is a default VPC, we have attributes associated to that.

47
00:04:06,760 --> 00:04:07,470
VPC, right.

48
00:04:07,540 --> 00:04:08,850
We have the answer.

49
00:04:09,040 --> 00:04:13,720
We have the site or blog of the default VPC and so on.

50
00:04:14,320 --> 00:04:23,710
As a next object, we have a subnet dev subnet one again with all the attributes of that subnet that

51
00:04:23,710 --> 00:04:31,990
we're all pfeg from Adewusi and stored in here and we have another subnet and the VPC that we created.

52
00:04:32,230 --> 00:04:35,560
So all our four components.

53
00:04:36,130 --> 00:04:36,520
Right.

54
00:04:36,760 --> 00:04:43,690
All these four are stored in the state and in the backup we have again, the previous state, which

55
00:04:43,690 --> 00:04:48,460
was empty resources before we reapplied our configuration.

56
00:04:48,880 --> 00:04:57,310
And as I said, TerraForm uses these files here to manage the state and update the current state in

57
00:04:57,310 --> 00:05:05,890
order to know what changes need to be done to take us from the current state to the desired state.

58
00:05:06,220 --> 00:05:13,330
And obviously, looking into this terraformed state, especially if we have hundreds of resources created

59
00:05:13,330 --> 00:05:20,650
in our account, is going to be pretty difficult, especially if we are just interested in some of the

60
00:05:20,650 --> 00:05:24,610
attributes and we don't want to see the whole object with all the attributes.

61
00:05:25,000 --> 00:05:32,010
TerraForm actually has comments so that we can access the information inside the state.

62
00:05:32,500 --> 00:05:34,660
So let's go back to the command line.

63
00:05:36,100 --> 00:05:46,030
And if I do terraform state and just return, you see all the subcommanders of terraformed state we

64
00:05:46,030 --> 00:05:53,680
have available so we can list all the resources that are in the state.

65
00:05:54,760 --> 00:05:55,930
So we have again.

66
00:05:56,870 --> 00:06:00,110
For resources, we have the resource type.

67
00:06:01,030 --> 00:06:11,620
And resource name, as well as whether it's coming from Edyta, we can also show a specific resource,

68
00:06:11,770 --> 00:06:14,320
for example, this one right here.

69
00:06:17,540 --> 00:06:25,400
And all this configuration to that specific resource in the output, and this can be actually a very

70
00:06:25,400 --> 00:06:31,640
useful command because in the configuration file itself, we are just defining a handful of attributes.

71
00:06:31,910 --> 00:06:34,340
The rest of them get generated by us.

72
00:06:34,340 --> 00:06:34,610
Right.

73
00:06:34,760 --> 00:06:42,560
So if you want to know the attribute values for the other attributes that A.W. sets, instead of going

74
00:06:42,560 --> 00:06:49,010
to the management console and finding that specific resource and then checking its attributes, we can

75
00:06:49,010 --> 00:06:50,640
just print it out here.

76
00:06:50,960 --> 00:06:59,660
So, for example, if we want the year end of the resource or the ID which gets generated by us, we

77
00:06:59,660 --> 00:07:00,500
don't set this.

78
00:07:00,830 --> 00:07:03,080
We can easily look it up in here.

79
00:07:03,260 --> 00:07:10,640
In other news, case could be if we're creating an easy two instance that gets a public IP address assigned

80
00:07:10,640 --> 00:07:17,870
to it automatically by us, we want to get that IP address and we can actually check it using TerraForm

81
00:07:17,870 --> 00:07:22,160
Stage Show Command for our easy to resource.

82
00:07:22,580 --> 00:07:29,240
So there are multiple use cases where we would need to check some information about a resource we just

83
00:07:29,240 --> 00:07:29,690
created.

84
00:07:30,050 --> 00:07:37,190
And we had a bunch of other commands like pulling the current state from us, as well as making changes

85
00:07:37,190 --> 00:07:43,940
in the state, which most of the time we shouldn't directly interact and update the state or update

86
00:07:43,970 --> 00:07:46,330
these file ourselves manually.

87
00:07:46,550 --> 00:07:52,300
It should be done by terraform itself as a result of applying our configuration.

88
00:07:52,880 --> 00:07:59,870
And if I remove this resource, let's say using terraformed destroy command or by just removing it from

89
00:07:59,870 --> 00:08:03,050
here and apply, let's remove this one as well.

90
00:08:03,770 --> 00:08:06,560
And let's do terraform applied with or approve.

91
00:08:10,820 --> 00:08:20,030
You see, that state got up to date and two components got deleted and in the state file, we now have

92
00:08:20,030 --> 00:08:27,530
just two components as well as if I do terraformed state list.

93
00:08:28,460 --> 00:08:31,640
These are the two components left in our state.
