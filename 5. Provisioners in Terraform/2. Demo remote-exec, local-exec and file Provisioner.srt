1
00:00:06,190 --> 00:00:09,670
And we can actually do this in a new branch.

2
00:00:09,670 --> 00:00:17,320
So from the current branch, we're going to create a new branch called Feature Slash Provisioners and

3
00:00:17,320 --> 00:00:26,650
we're going to switch to that branch and we're in this new branch, Provisioners And now we can add

4
00:00:26,650 --> 00:00:28,150
all the code in here.

5
00:00:28,150 --> 00:00:37,960
So as I said, there is an alternative to executing the commands or a script on a remote server using

6
00:00:37,960 --> 00:00:40,030
a provisioner called

7
00:00:42,700 --> 00:00:43,840
remote.

8
00:00:46,200 --> 00:00:46,950
Exec.

9
00:00:47,250 --> 00:00:56,640
So remote exec is basically a provisioner that allows us to connect to the remote server and execute

10
00:00:56,640 --> 00:00:58,770
commands on that server.

11
00:00:59,260 --> 00:00:59,750
Right.

12
00:00:59,760 --> 00:01:10,980
And the way we can define commands here is using inline, which basically lets us define a list of commands

13
00:01:10,980 --> 00:01:13,120
to be executed on a remote server.

14
00:01:13,140 --> 00:01:16,560
For example, we can export variables here.

15
00:01:17,760 --> 00:01:21,360
We can say environment dev doesn't really matter.

16
00:01:22,800 --> 00:01:25,710
And we can have a bunch of different comments here.

17
00:01:25,710 --> 00:01:33,590
We can also create a directory or even install some programs, right?

18
00:01:34,720 --> 00:01:40,780
So basically, any command that you want to execute, you can do it using a remote exec provisioner.

19
00:01:41,020 --> 00:01:45,460
And with inline attribute, you can list all the commands like this.

20
00:01:45,490 --> 00:01:46,210
Right.

21
00:01:47,200 --> 00:01:54,910
So all of these will be executed on the AWS instance that is going to be created.

22
00:01:54,940 --> 00:02:03,010
Now, whenever we define a remote exec provisioner, we actually have to tell TerraForm how to connect

23
00:02:03,010 --> 00:02:04,540
to that remote server.

24
00:02:04,540 --> 00:02:12,640
And even though we are in this instance a resource inside, it doesn't actually by default connect to

25
00:02:12,640 --> 00:02:13,500
that server.

26
00:02:13,510 --> 00:02:22,750
So we need to define the connection explicitly to connect to this remote server and we can do that using

27
00:02:22,750 --> 00:02:26,050
connection attribute for provisioner.

28
00:02:26,560 --> 00:02:29,290
This is specific to provisioner by the way.

29
00:02:29,290 --> 00:02:31,210
It actually belongs to it.

30
00:02:31,210 --> 00:02:37,000
And in the connection we have the type, we have two types of connection.

31
00:02:37,000 --> 00:02:43,840
We have SSH and win M the default actually being the SSH type.

32
00:02:44,020 --> 00:02:50,950
And then we have the host So we basically have to tell TerraForm the remote server address.

33
00:02:50,950 --> 00:02:57,400
And since we are inside the AWS instance and this is the server we are connecting to, we can actually

34
00:02:57,400 --> 00:03:04,600
use something called self and self is like, you know, in programming languages, you have this to

35
00:03:04,600 --> 00:03:06,870
refer to the current context.

36
00:03:06,880 --> 00:03:12,700
In our case, self refers to the object or the resource that we are in.

37
00:03:12,700 --> 00:03:21,160
And since we are in resource AWS instance Self will refer to this object right here and on self.

38
00:03:21,190 --> 00:03:25,630
Then we can get the public IP attribute like this.

39
00:03:26,470 --> 00:03:36,770
And then we need username which is EC2 user on EC2 instance and then we have the private key.

40
00:03:39,710 --> 00:03:46,490
You can also have password if you're connecting using username and password, but you can also pass

41
00:03:46,490 --> 00:03:51,260
in the private key, which you can also do by referring to a file.

42
00:03:51,260 --> 00:03:54,020
So we can do private.

43
00:03:54,770 --> 00:03:59,090
Key location, just like we did for Public Key.

44
00:04:00,330 --> 00:04:01,290
And.

45
00:04:09,470 --> 00:04:13,850
And the private key is ID, RSA.

46
00:04:16,360 --> 00:04:17,250
Private.

47
00:04:17,900 --> 00:04:18,370
Okay.

48
00:04:18,790 --> 00:04:20,620
So basically this.

49
00:04:21,960 --> 00:04:30,030
Block here will be able to connect TerraForm to the remote server using the SSH connection in order

50
00:04:30,030 --> 00:04:32,790
to execute these commands on it.

51
00:04:32,790 --> 00:04:39,960
So the difference is that here we're just passing on the data to EC2 or to AWS actually so that it can

52
00:04:39,960 --> 00:04:41,720
execute all these commands there.

53
00:04:41,730 --> 00:04:48,690
In our case, we're switching into the server and executing the commands there using TerraForm.

54
00:04:48,810 --> 00:04:51,000
So let's actually try this out.

55
00:04:51,810 --> 00:04:54,120
So I'm going to do a TerraForm plan.

56
00:04:56,140 --> 00:05:02,920
And it will show us that everything needs to be created because I have deleted all my resources and

57
00:05:02,920 --> 00:05:05,200
we can now do TerraForm apply?

58
00:05:13,410 --> 00:05:20,850
So as you see all these resources got created and here you see the output for the remote exec provisioner

59
00:05:20,850 --> 00:05:29,850
and you see that connection was established right here, connected with all these parameters and now

60
00:05:29,850 --> 00:05:33,330
we can actually ssh into the server.

61
00:05:40,470 --> 00:05:45,880
And here if I do ls we have a new directory.

62
00:05:45,900 --> 00:05:53,040
However, for a more realistic use case, you may want to execute a script on the remote server like

63
00:05:53,040 --> 00:05:54,540
we did in here.

64
00:05:55,510 --> 00:05:58,360
And there is a script attribute for that.

65
00:05:58,360 --> 00:05:59,950
So instead of inline.

66
00:06:01,560 --> 00:06:02,090
Attribute.

67
00:06:02,100 --> 00:06:03,480
We have script.

68
00:06:06,080 --> 00:06:10,400
And then we have the value, which is the name of the file that we want to execute.

69
00:06:10,400 --> 00:06:13,700
And we have this entry script file that we want to execute.

70
00:06:15,520 --> 00:06:18,400
And we can provide it like this directly.

71
00:06:18,850 --> 00:06:26,590
And this block now will basically take the entry script that we have on our local machine.

72
00:06:26,590 --> 00:06:32,260
And this script will be copied to the remote resource and execute it there.

73
00:06:32,260 --> 00:06:39,550
So TerraForm will actually take this and copy it to the EC2 instance and it will execute the script

74
00:06:39,550 --> 00:06:40,000
there.

75
00:06:40,000 --> 00:06:42,940
So basically all the commands that we see here will be executed.

76
00:06:42,940 --> 00:06:50,380
And I actually added this command here just to make sure that the changes to the Docker group, Docker

77
00:06:50,380 --> 00:06:52,540
user group will be applied.

78
00:06:52,540 --> 00:06:58,720
So when we add the user to the user group called Docker, we need to restart the Docker so that it loads

79
00:06:58,720 --> 00:07:02,920
that change so that we can then execute Docker without sudo.

80
00:07:05,340 --> 00:07:09,900
So that's how the remote exec provisioner actually works.

81
00:07:10,020 --> 00:07:13,070
And we actually have two other provisioner types.

82
00:07:13,080 --> 00:07:15,840
Another one is called Local Exec.

83
00:07:17,180 --> 00:07:21,260
So it's going to be provisioner instead of remote exec.

84
00:07:21,290 --> 00:07:29,360
We have local exec and local exec is basically commands that will be executed locally.

85
00:07:29,360 --> 00:07:35,750
So we're going to have a command attribute and we can execute any command like we would directly by

86
00:07:35,750 --> 00:07:38,930
typing it on our local computer.

87
00:07:39,170 --> 00:07:47,450
If you want it to print out the public IP address of this server right here, you could do self.

88
00:07:48,320 --> 00:07:51,800
Public IP and this will basically echo it.

89
00:07:51,830 --> 00:07:54,410
We can also save it into a file.

90
00:07:58,000 --> 00:08:01,810
And this will get executed locally on our machine.

91
00:08:02,480 --> 00:08:03,950
So that's the local exec.

92
00:08:03,950 --> 00:08:07,280
And the third one is called file provisioner.

93
00:08:07,490 --> 00:08:10,400
And it's also pretty straightforward, actually.

94
00:08:11,540 --> 00:08:13,760
Let me show you an example of that.

95
00:08:13,760 --> 00:08:16,880
So we have provisioner called file.

96
00:08:17,810 --> 00:08:26,930
And the purpose of this provision is basically to copy files from the local machine to the remote machine.

97
00:08:26,930 --> 00:08:32,390
So whenever we have any maybe configuration files or whatever files that we need on the server, we

98
00:08:32,390 --> 00:08:39,440
can actually copy them from wherever TerraForm script is running to the remote resource.

99
00:08:39,440 --> 00:08:41,810
And for that we have a source.

100
00:08:43,740 --> 00:08:45,830
So basically, what are we copying?

101
00:08:45,840 --> 00:08:51,090
So, for example, I don't know if we want to copy a script or a Readme file, it doesn't matter.

102
00:08:51,090 --> 00:08:54,040
We're going to provide that path to the file.

103
00:08:54,060 --> 00:09:01,380
Let's do an example with N3 Scripts SH file and then we're going to have a destination obviously on

104
00:09:01,380 --> 00:09:02,760
the remote machine.

105
00:09:05,660 --> 00:09:13,430
And this will be a location on the, in this case, EC2 machine where the file will be copied to.

106
00:09:13,700 --> 00:09:18,980
So the home directory of EC2 user.

107
00:09:19,830 --> 00:09:28,440
And then whatever file name we want to give it so it can be the same like this, or we can even give

108
00:09:28,440 --> 00:09:29,460
it another name.

109
00:09:30,380 --> 00:09:32,510
Like this, for example.

110
00:09:33,850 --> 00:09:40,270
So this provisioner will take the local file and copy it to the remote destination with this name.

111
00:09:41,920 --> 00:09:45,610
So these are the three provisioner types that we have.

112
00:09:45,610 --> 00:09:51,760
And the file provisioner also needs the connection block because obviously it needs to connect to the

113
00:09:51,760 --> 00:09:55,600
remote machine to copy the file on that machine.

114
00:09:55,600 --> 00:10:02,170
So these two provisioners remote exec and file Provisioners actually need a connection block to connect

115
00:10:02,170 --> 00:10:03,310
to the remote server.

116
00:10:03,310 --> 00:10:09,040
And local exec is just executed locally, so it doesn't need to connect to a remote resource.

117
00:10:09,220 --> 00:10:15,700
Now, when you're working with TerraForm, there are actually a lot of use cases and scenarios where

118
00:10:15,700 --> 00:10:20,470
you would want to execute some stuff remotely on your servers, right?

119
00:10:20,500 --> 00:10:27,040
There are things to configure their applications and software to be installed and so on.
