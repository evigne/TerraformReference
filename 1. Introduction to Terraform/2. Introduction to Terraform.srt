1
00:00:07,190 --> 00:00:14,720
So first of all, what is there for TerraForm allows you to automate and manage your infrastructure

2
00:00:15,020 --> 00:00:22,850
and your platform and services that run on that infrastructure, it's open source and it uses declarative

3
00:00:22,850 --> 00:00:29,240
language, meaning you don't have to define every step of how this automation in management is done.

4
00:00:29,510 --> 00:00:31,080
You just clear what you want.

5
00:00:31,100 --> 00:00:38,990
The final results or end results and TerraForm will figure out how to execute it versus imperative style,

6
00:00:39,260 --> 00:00:41,630
where you specify how to execute each step.

7
00:00:42,230 --> 00:00:46,540
So, as I said, terraform is a tool for infrastructure provisioning.

8
00:00:46,760 --> 00:00:48,420
So what does that mean exactly?

9
00:00:48,770 --> 00:00:55,130
Let's say you just started a project where you create some application and you want to set up an infrastructure

10
00:00:55,130 --> 00:00:58,040
from scratch where this application will run.

11
00:00:58,370 --> 00:01:00,260
How does your infrastructure look like?

12
00:01:00,680 --> 00:01:07,280
Let's say you want to spin up several servers where you will deploy your five micro service applications

13
00:01:07,430 --> 00:01:11,090
that make up your application as docker containers.

14
00:01:11,090 --> 00:01:14,420
And also you are going to deploy a database container.

15
00:01:14,720 --> 00:01:19,560
You decide to use A.W. as platform to build your whole infrastructure on.

16
00:01:20,060 --> 00:01:26,990
So a first step will be to go to us and prepare the set up so that applications can be deployed there.

17
00:01:27,320 --> 00:01:30,440
This means you create your private network space.

18
00:01:30,830 --> 00:01:34,370
You create an employee easy to server instances.

19
00:01:34,640 --> 00:01:39,980
You install Docker on each one of those, plus any other tools that you might need for your application.

20
00:01:40,220 --> 00:01:47,360
You set up security on your servers like firewalls, you set up network, etc. Once the infrastructure

21
00:01:47,360 --> 00:01:54,690
is prepared, you can now deploy your docker applications or docker containers on that prepared infrastructure.

22
00:01:54,860 --> 00:02:01,660
So as I said, these are two different tasks or two to separate steps or creating the whole setup.

23
00:02:01,670 --> 00:02:07,900
One is provisioning the infrastructure, preparing everything so the application can be deployed.

24
00:02:08,250 --> 00:02:12,170
The second one is actually deploying the applications on it.

25
00:02:12,290 --> 00:02:19,400
So you might even have two separate teams or two individuals who do these two separate tasks.

26
00:02:19,610 --> 00:02:25,340
So possible scenario develops, team member configuring the infrastructure and a developer then deploys

27
00:02:25,340 --> 00:02:27,590
the applications on the prepared infrastructure.

28
00:02:28,190 --> 00:02:32,270
So where does TerraForm come into this whole thing?

29
00:02:32,600 --> 00:02:39,170
TerraForm is used for the first part where you provision the infrastructure to prepare it for the application

30
00:02:39,170 --> 00:02:47,450
deployment, creating the PC, spinning up the servers, creating the security, the user with permissions,

31
00:02:47,600 --> 00:02:51,100
maybe installing Docker specific version on servers, et cetera.

32
00:02:51,260 --> 00:02:57,620
And obviously all of this needs to be done in the correct order because one task maybe depends on the

33
00:02:57,620 --> 00:02:57,950
other.

34
00:02:58,310 --> 00:03:05,240
No, here I must mention something that a lot of people ask when it comes to terraform, and that is

35
00:03:05,270 --> 00:03:11,510
what is a difference between Ansible and TerraForm, because they seem to be doing the same thing,

36
00:03:11,510 --> 00:03:15,950
especially if you read the official definitions or official documentation.

37
00:03:16,580 --> 00:03:18,370
They're sound like the same tools.

38
00:03:18,650 --> 00:03:20,390
So the question is pretty logical.

39
00:03:20,390 --> 00:03:24,680
What is the difference between them and which one should I use for my project?

40
00:03:25,430 --> 00:03:30,550
So let's see the similarities and differences between these two using our example set up.

41
00:03:31,370 --> 00:03:39,200
First of all, TerraForm and Ansible are both infrastructure as a code, meaning they're both used to

42
00:03:39,200 --> 00:03:43,570
automate provisioning, configuring and managing the infrastructure.

43
00:03:43,850 --> 00:03:48,230
However, TerraForm is mainly infrastructure provisioning tool.

44
00:03:48,860 --> 00:03:50,750
That's where its main power lies.

45
00:03:51,110 --> 00:03:56,690
But it also has possibilities to deploy applications in other tools on that infrastructure.

46
00:03:57,320 --> 00:04:01,120
Ansible, on the other hand, is mainly a configuration tool.

47
00:04:01,520 --> 00:04:08,240
So once the infrastructure is provisioned and it's there, Ansible can now be used to configure it and

48
00:04:08,240 --> 00:04:13,640
deploy applications, install and update software on that infrastructure, etc..

49
00:04:14,060 --> 00:04:19,880
So as you see, there are overlaps of what each tool does and this creates the confusion.

50
00:04:20,540 --> 00:04:27,680
Other differences to consider in terms of those overlaps are Ansible is more mature and TerraForm is

51
00:04:27,680 --> 00:04:28,460
relatively new.

52
00:04:28,460 --> 00:04:35,390
And because of that it's also changing dynamically and TerraForm is much more advanced in orchestration.

53
00:04:35,900 --> 00:04:42,440
So to summarize the difference, terraform is a better tool for provisioning infrastructure, and Ansible

54
00:04:42,440 --> 00:04:48,140
is a better tool for configuring that infrastructure, deploying, installing applications and services

55
00:04:48,140 --> 00:04:48,500
on them.

56
00:04:48,890 --> 00:04:55,430
So it's a common practice where developers, engineers use the combination of these tools to cover the

57
00:04:55,430 --> 00:05:02,650
whole set up end to end using both for their own strength instead of just using one tool.

58
00:05:03,020 --> 00:05:06,680
So now let's go back to our use case where.

59
00:05:06,970 --> 00:05:15,280
We created the infrastructure using TerraForm and on IWC provision successfully for your project and

60
00:05:15,280 --> 00:05:17,330
you deployed the application on it.

61
00:05:17,710 --> 00:05:23,950
Now we decide that you want to add five more servers to the existing infrastructure to deploy more micro

62
00:05:23,950 --> 00:05:29,080
services because your team developed some more features and they need to be deployed.

63
00:05:29,860 --> 00:05:35,500
And you also want to add some security configuration or maybe remove some stuff that you configure at

64
00:05:35,500 --> 00:05:36,040
the beginning.

65
00:05:36,310 --> 00:05:44,590
So now we are in the phase of managing the existing infrastructure, adding some stuff, reconfiguring,

66
00:05:44,590 --> 00:05:47,560
removing some stuff, et cetera, and using terraform.

67
00:05:47,560 --> 00:05:51,250
You can make such adjustments to infrastructure pretty easily.

68
00:05:51,910 --> 00:05:59,170
And this task of managing the infrastructure is just as important, because once you've created the

69
00:05:59,170 --> 00:06:04,150
initial infrastructure for your project, you will be continually adjusting and changing it.

70
00:06:04,330 --> 00:06:10,810
And because of that, you also need some automation tool that will do most of the heavy lifting for

71
00:06:10,810 --> 00:06:14,500
you so that you don't have to manually configure and do some stuff.

72
00:06:14,710 --> 00:06:20,860
So once you are set up with TerraForm to create and change or maintain your infrastructure and other

73
00:06:20,950 --> 00:06:26,320
useful thing or a common use case could be replicating that infrastructure.

74
00:06:26,650 --> 00:06:32,920
Let's say after you have tested this set up and everything works fine, you decide now you want to release

75
00:06:32,920 --> 00:06:35,130
your application in production environment.

76
00:06:35,770 --> 00:06:42,730
So you want to create a production environment that replicates this exact setup and keep the first as

77
00:06:42,730 --> 00:06:49,000
a development environment where you can test new features, new micro services and updates before you

78
00:06:49,000 --> 00:06:50,470
launch it into production.

79
00:06:50,810 --> 00:06:58,510
Again, you can use terraform here to automate that process so you can easily spin up an identical infrastructure

80
00:06:58,510 --> 00:07:05,110
and set up using the same terraform code that you use for the first set up the development environment

81
00:07:05,110 --> 00:07:09,940
setup, and you can do the same since we have an identical staging server as well.

82
00:07:10,030 --> 00:07:13,030
So that makes these tasks also very easy.

83
00:07:17,190 --> 00:07:24,030
So how does TerraForm do all this, how does he reform actually connect to this infrastructure provider

84
00:07:24,030 --> 00:07:27,510
platforms and use all these technologies to provision stuff?

85
00:07:27,870 --> 00:07:33,080
So, for example, how does TerraForm connect to enable us to create virtual space start?

86
00:07:33,090 --> 00:07:38,070
Is it to instances, configure networking, et cetera, in order to do the job?

87
00:07:38,550 --> 00:07:43,140
TerraForm has two main components that make up its architecture.

88
00:07:43,590 --> 00:07:51,550
The first one is terraformed core and the core uses to input sources in order to do its job.

89
00:07:51,600 --> 00:07:56,670
So we take Subform configuration that you as a user, right.

90
00:07:56,850 --> 00:08:00,670
And where you define what needs to be created or provisioned.

91
00:08:01,500 --> 00:08:07,530
And the second one is they're from state where TerraForm keeps them up to date, state of how the current

92
00:08:07,530 --> 00:08:11,350
set up of the infrastructure looks like.

93
00:08:11,940 --> 00:08:19,860
So what Cauthen does is it takes this inputs and he figures out the plan of what needs to be done.

94
00:08:20,160 --> 00:08:21,690
So it compares the state.

95
00:08:21,690 --> 00:08:22,740
What is the current state?

96
00:08:23,010 --> 00:08:25,510
What is the configuration that you desire?

97
00:08:25,830 --> 00:08:30,330
The end result, as I mentioned at the beginning, and compares that.

98
00:08:30,510 --> 00:08:36,210
And when it sees there is a difference or you want something else, then what the current state is,

99
00:08:36,420 --> 00:08:42,900
it figures out what needs to be done to get to the desired state in the configuration file.

100
00:08:43,170 --> 00:08:45,200
So what needs to be created?

101
00:08:45,210 --> 00:08:51,990
What needs to be updated, deleted in which order on that infrastructure set up in the second component

102
00:08:52,320 --> 00:08:58,410
or the second part of the architecture are providers for specific technologies.

103
00:08:58,620 --> 00:09:05,910
This could be cloud providers like it was Azure or other infrastructure as a service platforms.

104
00:09:06,250 --> 00:09:08,610
So for the infrastructure level tasks.

105
00:09:09,000 --> 00:09:16,410
But TerraForm, as I mentioned, has also providers for more high level components like cabernets or

106
00:09:16,560 --> 00:09:21,290
other platform as a service tools, even some software as a service tool.

107
00:09:21,300 --> 00:09:30,330
So it gives you possibility to create stuff on different levels like create an infrastructure, then

108
00:09:30,330 --> 00:09:36,780
deploy or create communities on top of it, and then create services inside that or components inside

109
00:09:36,780 --> 00:09:38,330
that this cluster.

110
00:09:38,880 --> 00:09:43,680
So it gives you all these possibilities and it does it through those providers.

111
00:09:43,950 --> 00:09:51,450
TerraForm has over 100 providers for these different technologies, and each provider then gives terraform

112
00:09:51,450 --> 00:09:54,560
user access to its resources.

113
00:09:54,930 --> 00:10:01,260
So through A.W. as provider, for example, you have access to hundreds of HWC resources like ISATOU

114
00:10:01,260 --> 00:10:04,680
instances, database users, cetera.

115
00:10:04,860 --> 00:10:12,000
With Karate's provider, you get access to these resources like services and deployments and name spaces,

116
00:10:12,000 --> 00:10:14,160
etc. So this is how this works.

117
00:10:14,670 --> 00:10:21,450
And This Way Terraformed tries to help you provision and cover the complete application set up from

118
00:10:21,450 --> 00:10:23,940
infrastructure all the way to the application.

119
00:10:24,240 --> 00:10:31,410
And this is sure convenient, but as I mentioned in the comparison between TerraForm and Ansible, terraformed

120
00:10:31,410 --> 00:10:34,980
strength is actually in the infrastructure provisioning.

121
00:10:35,100 --> 00:10:39,020
And for the other stuff, you can use Ansible or similar tools.

122
00:10:39,420 --> 00:10:47,970
So once the core creates an execution plan based on the input from config, file and state, it then

123
00:10:47,970 --> 00:10:56,820
uses providers for specific technologies to execute the plan to connect to those platforms and to actually

124
00:10:56,820 --> 00:10:59,490
carry out those execution steps.

125
00:11:03,730 --> 00:11:10,390
So now to also have an idea of how terraformed configuration file looks like, this is an example where

126
00:11:10,390 --> 00:11:19,810
you see Aiwass provider is configured and through the provider, you now have to use a resource like

127
00:11:19,810 --> 00:11:20,590
VPC.

128
00:11:20,750 --> 00:11:27,520
You can create that with some attributes, the same way you have the Grenada's provider, you're configured.

129
00:11:27,730 --> 00:11:33,250
And through that, now you can create a namespace resource where you have some attributes.

130
00:11:33,550 --> 00:11:35,950
And the syntax is very intuitive.

131
00:11:35,950 --> 00:11:38,850
I would say basically you define what you want.

132
00:11:38,890 --> 00:11:46,240
You want a resource of a certain technology or certain provider created, and then you define its attributes.

133
00:11:46,240 --> 00:11:49,600
And that's what TerraForm will create or do for you.

134
00:11:49,810 --> 00:11:56,170
Now, one thing I mentioned the beginning and I want to go into detail is the declarative approach that

135
00:11:56,170 --> 00:12:01,220
Terra forms configuration files are written in, and this is important to understand.

136
00:12:01,240 --> 00:12:08,650
So what does declarative mean exactly when you create a terraformed file instead of defining what steps

137
00:12:08,650 --> 00:12:15,910
to be executed, to create the BBC or to spin up five or two instances or create the network configuration,

138
00:12:16,300 --> 00:12:18,830
you define the end stage you desire.

139
00:12:19,150 --> 00:12:26,260
So you say, I want five servers with network configuration like this and I want one RWC user that has

140
00:12:26,650 --> 00:12:30,220
these permissions to access all the servers.

141
00:12:30,760 --> 00:12:32,500
TerraForm, go do that for me.

142
00:12:32,890 --> 00:12:39,520
So instead of defining exactly what to do, which is an imperative approach, you define what the end

143
00:12:39,520 --> 00:12:40,930
result should be.

144
00:12:41,260 --> 00:12:44,450
A declarative approach now for the initial setup.

145
00:12:44,470 --> 00:12:46,720
This may not make much difference.

146
00:12:46,990 --> 00:12:52,450
So when you see the configuration of imperative and declarative approach, it might actually look pretty

147
00:12:52,450 --> 00:12:53,050
similar.

148
00:12:53,260 --> 00:12:59,590
But consider when you're updating your infrastructure, like removing a server or adding another server

149
00:12:59,590 --> 00:13:06,190
or making other adjustments with imperative approach, you would say in a configuration file, remove

150
00:13:06,190 --> 00:13:13,540
two servers, add a firewall configuration, ID some permissions to the AWEX user, etc. So you give

151
00:13:13,540 --> 00:13:17,050
instructions of what to do with declarative approach.

152
00:13:17,440 --> 00:13:22,450
Like in terraform example, you would say my new desired state is No.

153
00:13:22,450 --> 00:13:23,530
Seven servers.

154
00:13:24,040 --> 00:13:30,820
This firewall configuration and user with this set of permissions do whatever needs to be done to get

155
00:13:30,820 --> 00:13:34,120
from the current state to the new desired state.

156
00:13:34,420 --> 00:13:40,000
So now you don't have to actually calculate and decide how many service needs to be aired.

157
00:13:40,190 --> 00:13:42,640
You just say, I want seven servers at the end.

158
00:13:43,060 --> 00:13:43,840
That's what I want.

159
00:13:44,110 --> 00:13:48,870
Or you don't need to calculate and figure out how many permissions or which permissions you should.

160
00:13:48,880 --> 00:13:52,450
And you just say, I want this set of permissions to come out at the end.

161
00:13:52,900 --> 00:13:59,320
So with the declarative approach, you just adjust the old configuration file and really execute it

162
00:13:59,320 --> 00:14:02,140
instead of adding the new set of instructions.

163
00:14:03,070 --> 00:14:07,900
This is obviously very comfortable because your configuration files stays clean and small.

164
00:14:08,200 --> 00:14:14,440
But also you always know what the current setup is just by looking at the configuration file, because

165
00:14:14,440 --> 00:14:16,090
that's always the end result.

166
00:14:16,360 --> 00:14:22,210
Whereas in the first approach and imperative, you have to somehow set this up and figure out the delta

167
00:14:22,210 --> 00:14:25,720
between all the changes applied by multiple instructions.

168
00:14:26,050 --> 00:14:32,380
So you've created to terraform file configuration file that defines your desired infrastructure set

169
00:14:32,380 --> 00:14:33,500
up on Adewusi.

170
00:14:34,150 --> 00:14:36,040
Now how do you make TerraForm?

171
00:14:36,220 --> 00:14:37,090
Take Action?

172
00:14:37,630 --> 00:14:45,220
TerraForm has commands you can execute to go through different stages, which is pretty clear and straightforward.

173
00:14:45,520 --> 00:14:52,540
The first command is refresh with this command terraformed will query the infrastructure provider in

174
00:14:52,540 --> 00:14:56,380
our case HWC to get the up to date state.

175
00:14:56,680 --> 00:15:02,080
So TerraForm will now know what is the current state of the infrastructure.

176
00:15:02,170 --> 00:15:10,270
The next command is plen remember I said the Corps is responsible for taking current state in your configuration

177
00:15:10,270 --> 00:15:15,270
file is input and decide based on the difference, what needs to be done.

178
00:15:15,460 --> 00:15:16,480
That's the plan.

179
00:15:16,840 --> 00:15:23,440
So what terraform needs to do in order to achieve the desired state that you define in the terraformed

180
00:15:23,440 --> 00:15:24,580
configuration file?

181
00:15:25,090 --> 00:15:29,440
If it's an initial set up, it figures out all the steps to create the desired set up.

182
00:15:29,770 --> 00:15:36,190
If it's an update, it compares the existing set up with the new desired state and figures out what

183
00:15:36,190 --> 00:15:43,750
changes and adjustments need to be made in which order to create the new desired state.

184
00:15:44,020 --> 00:15:47,950
For example, add a new server, add a new permission, etc..

185
00:15:48,340 --> 00:15:49,780
Now, this is just a plan.

186
00:15:49,960 --> 00:15:53,500
This is where the core kind of constructs the the plan.

187
00:15:53,980 --> 00:15:55,810
Logically, what needs to be done?

188
00:15:56,170 --> 00:16:03,240
The next command is the command where the actual execution happens, and that's the apelike.

189
00:16:04,060 --> 00:16:11,290
So with a play, you can execute the plan, so plan command is like a preview of what's going to happen

190
00:16:11,500 --> 00:16:16,840
if you execute a play, obviously terraform in the background, will do the refresh, get the up to

191
00:16:16,840 --> 00:16:22,330
date state, then create the plan and then apply it, which means if you want to execute a configuration

192
00:16:22,330 --> 00:16:26,620
file, you can just execute their play command and it will do all this.

193
00:16:26,860 --> 00:16:33,430
And another command is destroy, which obviously destroys the whole setup, removing elements one by

194
00:16:33,430 --> 00:16:40,150
one in the right order and cleaning up all the resources that were created, basically reverting everything

195
00:16:40,150 --> 00:16:41,370
that has been created.

196
00:16:41,380 --> 00:16:47,110
And this could be used if, let's say, you create an environment for an important demo day and you

197
00:16:47,110 --> 00:16:49,270
didn't want to interfere with the existing environments.

198
00:16:49,480 --> 00:16:55,630
Once the demo is over, you can destroy the whole setup, destroy like apply will also check what's

199
00:16:55,630 --> 00:17:00,130
currently running and then create a plan of what needs to be removed in which order.

200
00:17:04,350 --> 00:17:10,410
So some of the key takeaways for TerraForm are, first of all, terraform is a tool for creating and

201
00:17:10,410 --> 00:17:17,820
configuring infrastructure like virtual servers and so on, and then managing that infrastructure and

202
00:17:17,820 --> 00:17:21,450
not for installing applications on these provision servers.

203
00:17:21,630 --> 00:17:26,600
Second, terraform is a universal infrastructure as code tool.

204
00:17:26,850 --> 00:17:33,840
So even if every cloud provider has their own infrastructure as code tools, if you have a multi cloud

205
00:17:33,840 --> 00:17:40,290
infrastructure or a hybrid infrastructure like using your company's on premise servers and cloud servers,

206
00:17:40,530 --> 00:17:43,740
you can use just one tool for all of these environments.

207
00:17:43,770 --> 00:17:49,230
Instead of having teams for each environment, like one team managing the company's own data center

208
00:17:49,230 --> 00:17:54,430
infrastructure, one team for EWR infrastructure and one for Google Cloud and so on.

209
00:17:55,650 --> 00:18:02,580
And finally, because it integrates with many different technologies and platforms like Adewusi, Coronado's,

210
00:18:02,580 --> 00:18:09,120
Jenkins, VMware and so on, you have one tool that you can use to talk to all these different technologies

211
00:18:09,120 --> 00:18:14,420
and their APIs so you don't have to learn the API of each tool to talk to them.

212
00:18:14,760 --> 00:18:17,260
So terraform abstracts that layer for you.

213
00:18:17,340 --> 00:18:22,680
So now that you understand what TerraForm is and all of its benefits, let's actually get started using

214
00:18:22,680 --> 00:18:24,180
terraform in practice.
